// build tutorial.hbs supporting two formats, plain markdown or docco (that's markdown with typescript sourcecode embedded)

import { readFileSync, writeFileSync } from 'fs';
import { sep } from 'path';
import { compile, registerHelper } from 'handlebars';
import minimist = require('minimist');

const args = minimist(process.argv.slice(2));

const config: { outputType: ('markdown' | 'docco'), language: string, linkPrefix:string , markdownOutputFile:string} = {
  outputType: args.outputType || 'docco',
  language: 'ts',
  linkPrefix: args.linkPrefix || '../..',
  markdownOutputFile: args.markdownOutputFile || `..${sep}_guides${sep}tutorial.md`
};
const textHelperImplementation = (text: string): string => {
  if (config.outputType === 'docco') {
    return text.split('\n').map(l => l.trim() ? '// ' + l : '').join('\n');
  } else {
    return text;
  }
};
registerHelper('text', (options) => {
  return textHelperImplementation(options.fn(this));
});


const linkHelperImplementation = (link: string, label?: string, linkPrefix: string= config.linkPrefix) => {
  const url = (link.includes('.html')||link.includes('.md')) ? link : link + '.html';
  return `[${label || link}](${linkPrefix}/${url})`;
};
registerHelper('link', (options) => {
  return linkHelperImplementation(options.hash.url, options.hash.label);
});


const codeHelperImplementation = (text: string, config): string => {
  const linkText = config.link ? `Here you can see the output generated by TypeDoc: ${linkHelperImplementation(config.link)}.` : '';
  if (config.outputType === 'markdown') {
    return '```' + (config.language || 'ts') + text + '```\n' + linkText;

  } else {
    return text + '\n' + textHelperImplementation(linkText);
  }

};
registerHelper('code', (options) => {
  return codeHelperImplementation(options.fn(this), { ...config, link: options.hash.link });
});


registerHelper('onlydocco', (options) => {
  if (config.outputType === 'docco') {
    return options.fn(this);
  } else {
    return '';
  }
});

const content = readFileSync(`${__dirname}${sep}tutorial.hbs`).toString();
const template = compile(content);
const result = template(config);
const outputFile = config.outputType === 'docco' ? `${__dirname}${sep}index.ts` : `${config.markdownOutputFile}`;
writeFileSync(outputFile, result);
